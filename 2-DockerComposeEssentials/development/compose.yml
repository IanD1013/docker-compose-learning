name: ${DEV_PROJECT_NAME}
services:
  wordpress:
    build:
      context: . # defines the directory containing the build files including the Dockerfile
      dockerfile: Dockerfile # specifies the Dockerfile to use for building the image (not needed if the Dockerfile is named 'Dockerfile')
      args:
        WORDPRESS_SITE_NAME: "My Awesome Blog"
        WORDPRESS_ADMIN_EMAIL: "admin@example.com"
      target: development # specifies the target stage in a multi-stage Dockerfile to build
      cache_from:
        - wordpress:latest # specifies a cache source for the build to speed up the process
      labels: 
        maintainer: "ian.tung1013@gmail.com"
        version: "1.0"
    ports:
      - "8080:80"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD_FILE: /run/secrets/wordpress_db_password
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
    volumes:
      - ./wp-content:/var/www/html/wp-content
    networks:
      wordpress_network:
        ipv4_address: 192.168.1.2
    depends_on:
      - db
    secrets:
      - wordpress_db_password

  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
    volumes:
      - db_data:/var/lib/mysql
    networks:
      wordpress_network:
        ipv4_address: 192.168.1.3
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    secrets:
      - mysql_root_password
      - mysql_password
    
  migrate:
    image: wordpress:cli
    profiles: [staging]
    depends_on:
      - wordpress
      - db
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
    # The command reads the WordPress DB password from the secret file and then runs a wp core download.
    command: bash -c "export WORDPRESS_DB_PASSWORD=$(cat /run/secrets/wordpress_db_password) && wp core download --allow-root"
    networks:
      wordpress_network:
        ipv4_address: 192.168.1.6
    secrets:
      - wordpress_db_password
    restart: "no"  # Ensure this one-off task does not restart automatically

networks:
  wordpress_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24
          gateway: 192.168.1.1

volumes:
  db_data:
    labels:
      com.example.description: "Wordpress db storage"
      com.example.owner: "Ian Dong"
      com.example.environment: "Production"

secrets: 
  wordpress_db_password:
    file: ./secrets/wordpress_db_password.txt
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  mysql_password:
    file: ./secrets/mysql_password.txt