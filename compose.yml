services:
  wordpress:
    build:
      context: .  # Build context directory
      dockerfile: Dockerfile  # Specify a custom Dockerfile
      args:
        WORDPRESS_SITE_NAME: "My Awesome Blog"
        WORDPRESS_ADMIN_EMAIL: "admin@example.com"
      target: production  # Use the final stage in a multi-stage build
      cache_from:  # Use cached layers from these images
        - wordpress:latest
      labels:  # Add metadata labels
        maintainer: "ian.tung1013@gmail.com"
        version: "1.0"
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
    volumes:
      - ./wp-content:/var/www/html/wp-content
    networks:
       wordpress_network:
    depends_on:
      - db
    
  db:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
    volumes:
      - db_data:/var/lib/mysql
    networks:
       wordpress_network:
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

  migrate:
    image: wordpress:cli
    profiles: [staging]
    depends_on:
      - wordpress
      - db
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
    # The command reads the WordPress DB password from the secret file and then runs a wp core download.
    command: bash -c "export WORDPRESS_DB_PASSWORD=$(cat /run/secrets/wordpress_db_password) && wp core download --allow-root"
    networks:
      wordpress_network:
    secrets:
      - wordpress_db_password
    restart: "no"  # Ensure this one-off task does not restart automatically

networks:
  wordpress_network:
    driver: bridge

volumes:
  db_data:
    labels:
      com.example.description: "WordPress db storage"
      com.example.owner: "Ian Dong"